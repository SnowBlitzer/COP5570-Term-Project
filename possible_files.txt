/tor/ChangeLog
#notes on changes

/tor/doc/tor.1.txt
#idk, look into

/tor/ReleaseNotes
#notes on new release

/tor/scripts/maint/updateFallbackDirs.py
#updates guard options

/tor/src/ext/OpenBSD_malloc_Linux.c
#read

/tor/src/or/channel.c
#checks connection status
**POSSIBLY USEFUL


/tor/src/or/circpathbias.c
#read this

/tor/src/or/config.c
#

/tor/src/or/connection_or.c
# guard connection

/tor/src/or/connection.c
***DEF IMPORTANT***


/tor/src/or/directory.c
# using directory guards for direct downloads of directory information.

/tor/src/or/dirserv.c
#read this

/tor/src/or/dirvote.c
#guardfraction information on, use it to calculate its actual ... (read more)

/tor/src/or/entrynodes.c
# read this
***DEF IMPORTANT***

struct guard_selection_s

static guard_selection_t *
guard_selection_new(void)

--> stopped at line ~1000


/tor/src/or/nodelist.c
# read this

/tor/src/or/or.h
#choosing guard

Contains struct routerstatus_t which has is_possible_guard to mark if a node would be a good gaurd or not
/** Contents of a single router entry in a network status object.*/

Also includes node_t, which is a wrapper to provide consistency (wraps around routerstatus_t)



/tor/src/or/routerlist.c
#setting guards

/tor/src/or/routerparse.c
#read this
#not important





//TESTS


/tor/src/test/test_dir.c
#possible guard

/tor/src/test/test_entrynodes.c
#testing setting nodes
#read this

/* Try to pick an entry even though none of our routers are guards. */
chosen_entry = choose_random_entry(NULL);

/* Unintuitively, we actually pick a random node as our entry,
   because router_choose_random_node() relaxes its constraints if it
   can't find a proper entry guard. */


/tor/src/test/test_guardfraction.c
#read this

/tor/src/test/test_routerlist.c
#read this
